@startuml architecture_draft

!theme cyborg-outline
skinparam BackgroundColor #222222
'skinparam groupInheritance 2
skinparam PackageStyle frame
'skinparam linetype ortho
left to right direction





package gamehub {

    class GameHub {
        - {static} adminMode: Boolean = false
        - {static} loggedInPlayer: RegisteredPlayer
        --
        - {static} login(asAdmin: Boolean)
        - {static} createPlayer()
        - {static} showPlayerInfo(p: Player)
        - {static} showGameInfo(g: Game)
        - {static} createBot()
        - {static} quit()
        ..
        - {static} showMainMenu()
    }
    note left of GameHub::createPlayer
        admin mode
    end note





    package utils {
        interface Action <<function>> {
            + void action()
        }

        class MenuOption {
            - title: String
            --
            + MenuOption(title: String, action: Action)
            + call()
        }
        MenuOption "1..1 option" x---> "1..1 action" Action

        class Menu {
            - scanner: Scanner
            --
            + {static} showMenu(title: String, options: ArrayList<MenuOption>)
            + {static} getInputInt(promptMsg: String, min: int = 0, max: int = 1): int
        }
    }





    package user {

        package profile {
            interface MemberProfile {
                + {abstract} maxGames(): int
                + {abstract} canOwnGames(): boolean
                + {abstract} maxFriends(): int
                + {abstract} canAskFriendship(sender: Player, guest: Player): boolean
            }

            note top of MemberProfile
                each class implements the methods
                and return values based on their specifications.
            end note

            class StandardProfile {}
            MemberProfile <|-down- StandardProfile 
            class GoldProfile {}
            StandardProfile <|-down- GoldProfile 
            class KidProfile {}
            MemberProfile <|-down- KidProfile 
            class BotProfile {}
            MemberProfile <|-down- BotProfile 
        }





        abstract class Player {
            # username: String
            # memberProfile: MemberProfile
            --
            + addFriend(p: RegisteredPlayer)
            + removeFriend(p: RegisteredPlayer)
        }
        GameHub "1..1 app" *-- "0..* players" Player
        MemberProfile "1..1 profile" <--x "0..n players" Player
        Player "0..n friends \n" -- "0..n friends" Player





        class RegisteredPlayer {
            # email: String
            # birthDate: Date
            --
            + obtainGame(g: Game)
            + offerGame(g: Game, p: RegisteredPlayer)
            + deleteAccount()
        }
        Player <|-down- RegisteredPlayer

        note top of RegisteredPlayer
            addFriend(): kids stay with kids,
            adults stay with adults
        end note





        class Child {
            + offerGame(g: Game, p: RegisteredPlayer)
        }
        Child "0..n children" --- "1..2 tutors" RegisteredPlayer

        note right of Child::tutors
            min 1 and max 2.
        end note

        RegisteredPlayer <|-down- Child





        class Admin {}
        RegisteredPlayer <|-- Admin





        package bot {
            class Bot {}
            Player <|-down---- Bot





            interface GameAI {
                + {abstract} getName(): String
                + {abstract} wins(): Boolean
            }
            Bot "0..n strategies" *--- "0..1 owner" GameAI

            class BasicGameAI {
                - winProbability: Float
                - name: String
                --
                + wins(): Boolean
            }
            GameAI <|-down- BasicGameAI




            <> botDiamond
            Bot "1..1 bot" x.. "botOption" botDiamond
            GameAI "1..n ai" <-- botDiamond
        }
    }





    package library {
        class Game {
            - name: String
            - genre: String
            --
            + play(p1: Player, p2: Player): boolean
            + play(p1: Player): boolean
        }
        note top of Game
            When playing, a single player provided means
            playing with the bot.
            The play function returns if p1 wins.
        end note
        RegisteredPlayer "0..n players (1)" -- "0..n ownedGames (1)" Game: (1)
        Game "1..* games (11)" -- "0..1 bot (11)" Bot: (11)
        Game "1..1 game" <-- botDiamond





        class GameVersion {
            - year: int
            - publisher: String
            - globalSales: Float
        }
        Game "1..1 game (8)" --- "1..n versions (8)" GameVersion: (8)
        Platform "1..1 platform (9)" --- "1..n gameVersions (9)" GameVersion: (9)




        class GameResult {}
        GameResult "0..n results (2)" ----- "1..1 game (2)" Game: (2)
        <> playerDiamond
        GameResult "0..n results (3)" x.. playerDiamond: (3)
        playerDiamond --> "1..1 winner (4)" RegisteredPlayer: (4)
        playerDiamond --> "1..1 loser (4b)" RegisteredPlayer: (4b)
        note top of GameResult
            only for player-player results.
        end note





        class GameCollection {
            --
            + {static} GameCollection(dataPath: String)
        }
        GameCollection "1..1 collection (5)" ----- "0..n games (5)" Game: (5)
        GameCollection "1..1 collection (10)" ----- "0..n platforms (10)" Platform: (10)
        GameHub "1..1 app" *--- "1..1 collection" GameCollection





        class Platform {
            - name: String
        }
        Platform "1..1 platform (6)" ----- "0..n players (6)" RegisteredPlayer: (6)
    }

}

note top of gamehub
    For legibility reasons, getters, setters, add, remove
    and has methods are omitted.
end note

@enduml